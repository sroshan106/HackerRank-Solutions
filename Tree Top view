class Node:
    def __init__(self, info): 
        self.info = info  
        self.left = None  
        self.right = None 
        self.level = None 

    def __str__(self):
        return str(self.info) 

class BinarySearchTree:
    def __init__(self): 
        self.root = None

    def create(self, val):  
        if self.root == None:
            self.root = Node(val)
        else:
            current = self.root
         
            while True:
                if val < current.info:
                    if current.left:
                        current = current.left
                    else:
                        current.left = Node(val)
                        break
                elif val > current.info:
                    if current.right:
                        current = current.right
                    else:
                        current.right = Node(val)
                        break
                else:
                    break
global l
l=[]
global dic
dic={}
def levelorder(root):
    global l
    if root==None:
        return
    temp= Node(1)
    q=[]
    q.append(root)
    q.append(None)
    i=0
    while(len(q)>1):
        temp=q.pop(0)
        if(temp==None):
            q.append(None)
        if(temp!=None):
            if(temp.left):
                q.append(temp.left)
            if(temp.right):
                q.append(temp.right)
            l.append(temp.info)

def vertical(hd,root):
    if(root==None):
        return
    global dic
    if hd in dic:
        dic[hd].append(root.info)
    else:
        dic[hd] = [root.info]
    vertical(hd-1,root.left)
    vertical(hd+1,root.right)
def topView(root):
    global l
    levelorder(root)
    hd=0
    vertical(hd,root)
    for i in sorted(dic.keys()):
        k=dic[i]
        for j in l:
            if j in k:
                print(j,end=" ")
                break;
tree = BinarySearchTree()
t = int(input())

arr = list(map(int, input().split()))

for i in range(t):
    tree.create(arr[i])

topView(tree.root)          
